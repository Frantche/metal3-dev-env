---
  - name: Get the master objects
    shell: "kubectl get m3m -n {{ NAMESPACE }} -o json |  jq -r '.items[] | \
            select(.metadata.name | contains(\"controlplane\")) | \
            (.metadata.annotations.\"metal3.io/BareMetalHost\"),([.metadata.ownerReferences |.[] | \
            select(.kind==\"Machine\")][0] | .name)'"
    register: masters

  - set_fact:
      MASTER_BMH_0: "{{ masters.stdout_lines.0 | replace('metal3/','')}}"
      MASTER_NODE_0: "{{ masters.stdout_lines.1 }}"
      MASTER_BMH_1: "{{ masters.stdout_lines.2 | replace('metal3/','')}}"
      MASTER_NODE_1: "{{ masters.stdout_lines.3 }}"
      MASTER_BMH_2: "{{ masters.stdout_lines.4 | replace('metal3/','')}}"
      MASTER_NODE_2: "{{ masters.stdout_lines.5 }}"
      MASTER_VM_0: "{{ masters.stdout_lines.0 | replace('-','_') | replace('metal3/','') }}"
      MASTER_VM_1: "{{ masters.stdout_lines.2 | replace('-','_') | replace('metal3/','') }}"
      MASTER_VM_2: "{{ masters.stdout_lines.4 | replace('-','_') | replace('metal3/','') }}"
      NUMBER_OF_BMH: "{{ NUM_OF_MASTER_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"
      K8S_ORIGINAL_VERSION: "v1.20.4"
      K8S_UPGRADED_VERSION: "v1.20.5"
      KCP_KIND: "KubeadmControlPlane"
      KCP_API_VERSION: "controlplane.cluster.x-k8s.io/v1alpha3"

  - name: Fetch the target cluster kubeconfig
    shell: "kubectl get secrets {{ CLUSTER_NAME }}-kubeconfig -n {{ NAMESPACE }} -o json | jq -r '.data.value'| base64 -d > /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"

  - name: Wait until all "{{ NUMBER_OF_BMH }}" machines become running.
    shell: | 
        kubectl get machines -n "{{ NAMESPACE }}" -o json | jq -r '[ .items[] 
        | select (.status.phase == "Running" or .status.phase == "running") 
        | .metadata.name ] | length'
    register: provisioned_machines
    retries: 200
    delay: 20
    until: provisioned_machines.stdout == NUM_OF_MASTER_REPLICAS

  - name: Get KCP details
    community.kubernetes.k8s_info:
      kind: "{{ KCP_KIND }}"
      namespace: "{{ NAMESPACE }}"
      api_version: "{{ KCP_API_VERSION }}" 
    register: kcp_details
  
  - name: Get KCP name.
    set_fact:
      kcp_name: "{{ kcp_details | json_query(query) }}"
    vars:
      query: "resources[].metadata.name"

  - name: Display KCP name
    debug:
      msg: "{{ kcp_name }}"

  - name: Get Metal3MachineTemplate name from KCP.
    set_fact:
      m3mt_name: "{{ kcp_details | json_query(query) }}"
    vars:
      query: "resources[].spec.infrastructureTemplate.name"
  
  - name: Display Metal3MachineTemplate name
    debug:
      msg: "{{ m3mt_name }}"

  - name: Set variable storing KCP k8s version before upgrade.
    set_fact:
      k8s_version: "{{ kcp_details | json_query(query) }}"
    vars:
      query: "resources[].spec.version"
  
  - name: Display KCP k8s version before upgrade
    debug:
      msg: "{{ k8s_version }}"

  - name: Update Metal3MachineTemplate nodeReuse field to True.
    shell: |
        "kubectl patch m3mt "{{ m3mt_name }}" -n "{{ NAMESPACE }}" --type=json -p='[{\"replace\": \"add\", \"path\": \"/spec/nodeReuse\", \"value\": \"true\"}]'"

  - name: Upgrade KCP k8s version to "{{ K8S_UPGRADED_VERSION }}.
    shell: |
        "kubectl patch kcp "{{ kcp_name }}" -n "{{ NAMESPACE }}" --type=json -p='[{\"op\": \"add\", \"path\": \"/spec/version\", \"value\": \"{{K8S_UPGRADED_VERSION}}\"}]'"
  
  - name: Get updated KCP details
    community.kubernetes.k8s_info:
      kind: "{{ KCP_KIND }}"
      namespace: "{{ NAMESPACE }}"
      api_version: "{{ KCP_API_VERSION }}" 
    register: updated_kcp_details

  - name: Set variable storing KCP k8s version after upgrade.
    set_fact:
      k8s_upgraded_version: "{{ updated_kcp_details | json_query(query) }}"
    vars:
      query: "resources[].spec.version"
  
  - name: Display KCP k8s version after upgrade
    debug:
      msg: "{{ k8s_upgraded_version }}"
  
  - name: Wait until first BMH starts to deprovision
    shell: kubectl get bmh -n "{{ NAMESPACE }}" | grep -w deprovisioning | wc -l
    retries: 30
    delay: 20
    register: deprovisioning_hosts
    until:
      - deprovisioning_hosts.stdout == "1"

  - name: Wait until all "{{ NUM_OF_MASTER_REPLICAS }}" machines become running an updated with new "{{K8S_UPGRADED_VERSION}}" version.
    shell: |
        kubectl get machines -n "{{ NAMESPACE }}" -o json | jq -r '[ .items[]
        | select (.status.phase == "Running" or .status.phase == "running")
        | .spec.version == "{{K8S_UPGRADED_VERSION}}" ] | all'
    register: updated_machines
    retries: 200
    delay: 20
    until: 
      - updated_machines.stdout == "true"

  - name: Wait until "{{ NUMBER_OF_BMH }}" BMH are provisioned
    shell: kubectl get bmh -n "{{ NAMESPACE }}" | grep -w provisioned | wc -l
    retries: 200
    delay: 20
    register: provisioned_hosts
    until: provisioned_hosts.stdout ==  NUM_OF_MASTER_REPLICAS

